#! base-stage
ARG BASE_IMAGE
FROM $BASE_IMAGE as base-stage

ARG DEBIAN_FRONTEND=noninteractive

ARG UBUNTU_USER=docker_user
ARG UBUNTU_PSW=password
ARG UBUNTU_UID=1000
ARG UBUNTU_GID=1000

ENV UBUNTU_USER=$UBUNTU_USER
ENV UBUNTU_PSW=$UBUNTU_PSW
ENV UBUNTU_UID=$UBUNTU_UID
ENV UBUNTU_GID=$UBUNTU_GID

# Create local user docker_user
RUN useradd -r -m -d "/home/$UBUNTU_USER" -s /bin/bash -g root -G sudo -G dialout -u $UBUNTU_UID -p "$(openssl passwd -6 "$UBUNTU_PSW")" $UBUNTU_USER

# Add local user to system groups
RUN usermod -aG sudo $UBUNTU_USER
RUN usermod -aG root $UBUNTU_USER
RUN usermod -aG dialout $UBUNTU_USER
RUN usermod -aG tty $UBUNTU_USER
RUN usermod -aG audio $UBUNTU_USER
RUN usermod -aG video $UBUNTU_USER


########################
# INSTALL DEPENDENCIES #
########################

# Update
RUN apt update && \
	apt upgrade -y

RUN apt install --quiet -y \
    sudo software-properties-common lsb-release
RUN add-apt-repository universe

# Ubuntu deps
RUN apt install --quiet -y \
    apt-transport-https ca-certificates gnupg gnupg2 gnupg-agent libssl-dev \
    git curl file wget zip unzip pkg-config openssh-client openssh-server \
    xterm tmux gdb valgrind \
    htop net-tools nmap lynx \
    libx11-dev vim iputils-ping

RUN apt install --quiet -y \
    bash-completion
RUN echo "source /usr/share/bash-completion/completions/git" >> ~/.bashrc

# C++ deps
RUN apt install --quiet -y \
    build-essential clang cmake ccache ninja-build

# C++ linter
RUN apt install --quiet -y \
    clang-tidy clang-tools \
    cppcheck \
    astyle

# C++ testing deps
RUN apt install --quiet -y libgtest-dev libgmock-dev lcov

# C++ common lib
RUN apt install --quiet -y \
    libboost-all-dev \
    libeigen3-dev

# Python deps
RUN apt install --quiet -y \
    python3 python3-dev python3-pip python3-future
RUN pip3 install --upgrade \
    wheel setuptools argcomplete

# Python linter
RUN pip3 install --upgrade \
    pylint flake8 mypy

# Python test
RUN pip3 install --upgrade \
    pytest==7.1.3 pytest-mock pytest-cov pytest-html \
    pytest-pep8 pytest-pylint pytest-flake8

# Python formatter
RUN pip3 install --upgrade \
    black

# Python utils libs
RUN pip3 install --upgrade \
    pandas pyyaml jsonschema jinja2 toml

# Python visualization libs
RUN pip3 install --upgrade \
    tk matplotlib

# Python math libs
RUN pip3 install --upgrade \
    numpy scipy

# Enabling caching
RUN echo "export CC=/usr/lib/ccache/gcc" >> ~/.bashrc
RUN echo "export CXX=/usr/lib/ccache/g++" >> ~/.bashrc


# Clean
RUN apt -y autoremove \
	&& apt clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*


#! ros-stage
FROM base-stage as ros-stage

# Update
RUN apt update && \
	apt upgrade -y

RUN apt install --quiet -y \
    ros-dev-tools

RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc
RUN echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashrc
RUN echo "export ROS_DOMAIN_ID=0" >> ~/.bashrc

ENV RCUTILS_COLORIZED_OUTPUT=1
ENV RCUTILS_LOGGING_USE_STDOUT=1
ENV RCUTILS_LOGGING_BUFFERED_STREAM=1
# ENV RCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"


#! rpi-stage
FROM ros-stage as rpi-stage

# Update
RUN apt update && \
	apt upgrade -y


# pigpio
USER $UBUNTU_USER
WORKDIR /home/$UBUNTU_USER
RUN wget https://github.com/joan2937/pigpio/archive/master.zip
RUN unzip master.zip
RUN cd pigpio-master && make
USER root
RUN cd pigpio-master && make install
RUN rm -r master.zip
RUN rm -r pigpio-master

RUN pigpiod


# Clean
USER root
RUN apt -y autoremove && apt clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

# Set user
USER $UBUNTU_USER
WORKDIR /home/$UBUNTU_USER

# Set entrypoint
COPY ./docker/ros2_entrypoint.sh /
ENTRYPOINT ["/ros2_entrypoint.sh"]

RUN echo "source /usr/share/bash-completion/completions/git" >> ~/.bashrc
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc
RUN echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashrc
# RUN echo "export force_color_prompt=yes" >> ~/.bashrc

ENV force_color_prompt=yes
CMD ["bash"]


#! sim-stage
FROM ros-stage as sim-stage

# Update
RUN apt update && \
	apt upgrade -y

RUN apt install --quiet -y \
    ros-dev-tools

RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc
RUN echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashrc

ENV RCUTILS_COLORIZED_OUTPUT=1
ENV RCUTILS_LOGGING_USE_STDOUT=1
ENV RCUTILS_LOGGING_BUFFERED_STREAM=1
# ENV RCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"

# Ignition Gazebo
# RUN apt install -y ros-${ROS_DISTRO}-ros-ign

# Ignition Gazebo: Garden
RUN wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null
RUN apt update
RUN apt install -y gz-garden
RUN apt install -y ros-${ROS_DISTRO}-ros-gzgarden

# "http://models.gazebosim.org":"https://fuel.ignitionrobotics.org/1.0/OpenRobotics/models/"
ENV GZ_VERSION=garden
ENV GZ_CONFIG_PATH=/usr/share/gz
ENV GZ_SIM_RESOURCE_PATH="$HOME/.gz/sim/models"
ENV GZ_SIM_SYSTEM_PLUGIN_PATH="$HOME/.gz/sim/plugins"
ENV GZ_SIM_SERVER_CONFIG_PATH=
ENV GZ_GUI_PLUGIN_PATH="$HOME/.gz/gui/plugins"
ENV GZ_GUI_RESOURCE_PATH=

# Plotjuggler
RUN apt install -y ros-$ROS_DISTRO-plotjuggler-ros

# foxglove
#   https://docs.ros.org/en/humble/How-To-Guides/Visualizing-ROS-2-Data-With-Foxglove-Studio.html
#   https://docs.foxglove.dev/docs/connecting-to-data/frameworks/ros2/
RUN wget https://github.com/foxglove/studio/releases/download/v1.75.0/foxglove-studio-1.75.0-linux-amd64.deb
RUN apt install -y ./foxglove-studio-*.deb
RUN apt install -y ros-$ROS_DISTRO-foxglove-bridge
RUN rm /foxglove-studio-*.deb

# QEMU
# RUN apt install -y qemu-user-static
# COPY qemu-aarch64-static /usr/bin/qemu-aarch64-static

# pigpio
USER $UBUNTU_USER
WORKDIR /home/$UBUNTU_USER
RUN wget https://github.com/joan2937/pigpio/archive/master.zip
RUN unzip master.zip
RUN cd pigpio-master && make
USER root
RUN cd pigpio-master && make install
RUN rm -r master.zip
RUN rm -r pigpio-master


# Clean
USER root
RUN apt -y autoremove && apt clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

# Set user
USER $UBUNTU_USER
WORKDIR /home/$UBUNTU_USER

# Set entrypoint
COPY ./docker/ros2_entrypoint.sh /
ENTRYPOINT ["/ros2_entrypoint.sh"]

RUN echo "source /usr/share/bash-completion/completions/git" >> ~/.bashrc
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc
RUN echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashrc
# RUN echo "export force_color_prompt=yes" >> ~/.bashrc

ENV force_color_prompt=yes
CMD ["bash"]