#! base-stage
FROM ubuntu:jammy as base-stage

ARG DEBIAN_FRONTEND=noninteractive

ARG UBUNTU_USER=docker_user
ARG UBUNTU_UID=1000
ARG UBUNTU_PSW=docker

ENV UBUNTU_USER=$UBUNTU_USER
ENV UBUNTU_UID=$UBUNTU_UID
ENV UBUNTU_PSW=$UBUNTU_PSW

# Create local user docker_user
RUN useradd -r -m -d /home/$UBUNTU_USER -s /bin/bash -g root -G sudo -G dialout -u $UBUNTU_UID -p "$(openssl passwd -6 $UBUNTU_PSW)" $UBUNTU_USER
RUN usermod -aG sudo $UBUNTU_USER
RUN usermod -aG dialout $UBUNTU_USER


########################
# INSTALL DEPENDENCIES #
########################

# Update
RUN add-apt-repository universe
RUN apt update && \
	apt upgrade -y

# Ubuntu deps
RUN apt install --quiet -y \
    sudo software-properties-common lsb-release \
    apt-transport-https ca-certificates, gnupg, gnupg2, gnupg-agent, libssl-dev \
    curl file wget zip unzip pkg-config openssh-client openssh-server \
    xterm tmux gdb valgrind \
    htop net-tools nmap

# C++ deps
# doxygen
RUN apt install --quiet -y \
    build-essential \
    clang \
    cmake \
    ccache

# C++ linter
RUN apt install --quiet -y \
    clang-tidy clang-tools \
    cppcheck

# C++ testing deps
RUN apt install --quiet -y \
    libgtest-dev \
    libgmock-dev \
    lcov

# Python deps
RUN apt install --quiet -y \
    python3 \
    python3-dev \
    python3-wheel \
    python3-setuptools \
    python3-pip

# Python linter
RUN apt install --quiet -y \
    python3-pylint \
    python3-flake8 \
    python3-mypy

RUN pip3 install --upgrade argcomplete

# Python testing deps
RUN apt install --quiet -y \
    python3-pytest \
    python3-pytest-mock \
    python3-pytest-cov pytest-html \
    python3-pytest-pep8 \
    python3-pytest-pylint \
    python3-pytest-flake8

# Python math deps
RUN apt install --quiet -y \
    python3-pandas python3-tk python3-matplotlib \
    python3-pyyaml \
    python3-numpy python3-scipy

# Python system control deps
RUN pip3 install --upgrade \
    qpsolvers \
    quadprog gurobipy osqp cvxopt cvxpy


# Clean
RUN apt -y autoremove \
	&& apt clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*


#! ros2-stage
FROM base-stage as ros2-stage

# Update
RUN apt update && \
	apt upgrade -y

# Set locale
RUN apt update && sudo apt install locales
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
RUN export LANG=en_US.UTF-8



# Install ROS2: Humble
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt update && apt upgrade -y
RUN apt install ros-humble-desktop
RUN apt install ros-dev-tools
RUN pip3 install vcstool colcon-common-extensions

# Source ROS2 (optional)
# source /opt/ros/humble/setup.bash

# Install Gazebo Ignition
# RUN sh -c 'echo "deb [arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'
# RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
# RUN apt update

RUN apt install -y ros-${ROS_DISTRO}-ros-ign


# Clean
RUN apt -y autoremove \
	&& apt clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*



##############
# ENTRYPOINT #
##############

# Set user
USER $UBUNTU_USER
WORKDIR /home/$UBUNTU_USER

# Set entrypoint
COPY ./docker/ubuntu_entrypoint.sh /
ENTRYPOINT ["/ubuntu_entrypoint.sh"]

ENV force_color_prompt=yes
CMD ["bash"]