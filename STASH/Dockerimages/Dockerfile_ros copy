ARG ROS_DISTRO

FROM $ROS_DISTRO as base-stage

ARG DEBIAN_FRONTEND=noninteractive

ARG UBUNTU_USER=docker_user
ARG UBUNTU_PSW=docker
ARG UBUNTU_UID=1000
ARG UBUNTU_GID=1000

ENV UBUNTU_USER=$UBUNTU_USER
ENV UBUNTU_PSW=$UBUNTU_PSW
ENV UBUNTU_UID=$UBUNTU_UID
ENV UBUNTU_GID=1000

# Create local user docker_user
RUN useradd -r -m -d /home/$UBUNTU_USER -s /bin/bash -g root -G sudo -G dialout -u $UBUNTU_UID -p "$(openssl passwd -6 $UBUNTU_PSW)" $UBUNTU_USER

# Add local user to system groups
RUN usermod -aG sudo $UBUNTU_USER
RUN usermod -aG dialout $UBUNTU_USER
RUN usermod -aG tty $UBUNTU_USER
RUN usermod -aG audio $UBUNTU_USER
RUN usermod -aG video $UBUNTU_USER

# Update
RUN apt update


########################
# INSTALL DEPENDENCIES #
########################

# Ubuntu deps
RUN apt install --quiet -y \
    sudo software-properties-common lsb-release \
    apt-transport-https ca-certificates gnupg gnupg2 gnupg-agent libssl-dev \
    curl file wget zip unzip pkg-config openssh-client openssh-server \
    xterm tmux gdb valgrind \
    htop net-tools nmap

# C++ deps
RUN apt install --quiet -y \
    build-essential \
    clang \
    cmake \
    ccache \
	ninja-build

# C++ linter
RUN apt install --quiet -y \
    clang-tidy clang-tools \
    cppcheck \
    astyle

# C++ testing deps
RUN apt install --quiet -y \
    libgtest-dev \
    libgmock-dev \
    lcov

# Python deps
RUN apt install --quiet -y \
    python3 \
    python3-dev \
    python3-pip

RUN pip3 install --upgrade \
    wheel \
    setuptools \
    argcomplete

# Python linter
RUN pip3 install --upgrade \
    pylint \
    flake8 \
    mypy

RUN pip3 install --upgrade \
    pytest==7.1.3 \
    pytest-mock \
    pytest-cov pytest-html \
    pytest-pep8 \
    pytest-pylint \
    pytest-flake8

RUN pip3 install --upgrade \
    pandas tk matplotlib \
    pyyaml \
    numpy scipy

# Python parsers
RUN pip3 install --upgrade \
    pyyaml \
    jsonschema \
    jinja2 \
    toml


# Python system control deps
RUN pip3 install --upgrade \
    qpsolvers \
    quadprog gurobipy osqp cvxopt cvxpy

# # install CVXOPT (https://cvxopt.org/)
# RUN pip3 install --upgrade cvxopt

# # install CVXPY (https://www.cvxpy.org/index.html)
# RUN pip3 install --upgrade cvxpy

# # install Guroby ()
# RUN pip3 install --upgrade gurobipy

# # install osqp ()
# RUN pip3 install --upgrade osqp


RUN pip3 install vcstool colcon-common-extensions


#! gazebo-stage
# FROM base-stage as gazebo-stage


#! ignition-stage
# FROM base-stage as ignition-stage

# Install Gazebo Ignition
# RUN sh -c 'echo "deb [arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'
# RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
# RUN apt update

RUN apt install -y ros-${ROS_DISTRO}-ros-ign

# Open html links
RUN apt install --quiet -y lynx
RUN usermod -aG root $UBUNTU_USER

# Install git
RUN apt install --quiet -y bash-completion



#! px4-1.13-stage
FROM base-stage as px4-1.13-stage

RUN apt-get update && \
    apt install --quiet -y python3-future

RUN apt-get update && \
    apt install --quiet -y \
    openjdk-11-jdk

# C++ common lib
RUN apt update && \
    apt install --quiet -y \
    libboost-all-dev \
    libeigen3-dev

# Algorithms libs
RUN apt update && \
    apt install --quiet -y \
    libflann-dev \
    libqhull-dev

# 3D computer graphics
RUN apt update && \
    apt install --quiet -y \
    libvtk6-dev \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    libgstreamer-plugins-base1.0-dev \
    libimage-exiftool-perl \
    libglfw3-dev

# Ubuntu
RUN apt update && \
    apt install --quiet -y \
    libgtk-3-dev \
    lightdm \
    shellcheck \
    musl-dev \
    libc-dev \
    dmidecode

# Data serialization
RUN apt update && \
    apt install --quiet -y \
    protobuf-compiler

# Parser libs
RUN apt update && \
    apt install --quiet -y \
	libxml2-dev \
	libxml2-utils

# Drivers
RUN apt update && \
    apt install --quiet -y \
    libusb-dev \
    libusb-1.0-0-dev \
    libudev-dev

# Others
RUN apt update && \
    apt install --quiet -y \
	rsync \
    libffi-dev \
    libbsd-dev

RUN pip3 install --upgrade \
    kconfiglib \
    empy

# X11
RUN apt update && \
    apt install --quiet -y \
    libx11-dev \
    libxrandr-dev \
    libxi-dev \
    libxinerama-dev

# ROS
RUN pip3 install --upgrade \
    pyros-genmsg


# INSTALL PX4 dependencies
## Gradle (Required to build Fast-RTPS-Gen)
# TODO: Try gradle-6.8.3
ENV GRADLE_VERSION="6.3-rc-4"
RUN wget -q "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip" -O /tmp/gradle-${GRADLE_VERSION}-bin.zip \
	&& mkdir /opt/gradle \
	&& cd /tmp \
	&& unzip -d /opt/gradle gradle-${GRADLE_VERSION}-bin.zip \
	&& rm -rf /tmp/*

ENV PATH "/opt/gradle/gradle-${GRADLE_VERSION}/bin:$PATH"

## Intall foonathan_memory from source as it is required to Fast-RTPS >= 1.9
ENV FOONATHAN_VERSION="v1.3.0"
RUN git clone --recursive https://github.com/eProsima/foonathan_memory_vendor.git && \
    cd foonathan_memory_vendor && mkdir build && cd build && \
    cmake .. && cmake --build . --target install -- -j $(nproc) && ldconfig && rm -rf /tmp/*

## Intall Fast-DDS (Fast-RTPS 2.0.2)
ENV FASTDDS_VERSION="v2.0.2"
RUN git clone --recursive https://github.com/eProsima/Fast-DDS.git -b $FASTDDS_VERSION && \
    cd Fast-DDS && mkdir build && cd build && cmake -DTHIRDPARTY=ON -DSECURITY=ON .. && \
    cmake --build . --target install -- -j $(nproc) && rm -rf /tmp/* && rm -rf Fast-DDS

## Intall Fast-RTPS-Gen 1.0.4
ENV FASTDDS_GEN_VERSION="v1.0.4"
RUN git clone --recursive https://github.com/eProsima/Fast-DDS-Gen.git -b $FASTDDS_GEN_VERSION && \
    cd Fast-DDS-Gen && gradle assemble && gradle install && rm -rf /tmp/*

RUN export PATH=/home/$UBUNTU_USER/Fast-DDS-Gen/scripts:$PATH
RUN echo "export PATH=${WORKSPACE}/Fast-DDS-Gen/scripts:$PATH" >> /home/$UBUNTU_USER/.bashrc

## Setup XRCE-DDS Agent & Client
RUN git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
RUN cd Micro-XRCE-DDS-Agent && mkdir build && cd build && cmake .. && make && make install && ldconfig /usr/local/lib/


#TODO PX4 Flight controller
# RUN git clone --recurse-submodules -b v1.13.3 https://github.com/PX4/PX4-Autopilot.git /home/docker_user/PX4-Autopilot
# RUN cd /home/docker_user/PX4-Autopilot
# RUN git checkout v1.13.3
# RUN make px4_sitl_rtps gazebo
# RUN cd





#! px4-1.14-stage
FROM base-stage as px4-1.14-stage


# pip install --user -U empy pyros-genmsg setuptools


#TODO PX4 Flight controller (NEW)
# git clone https://github.com/PX4/PX4-Autopilot.git --recursive
# bash ./PX4-Autopilot/Tools/setup/ubuntu.sh
# cd PX4-Autopilot/
# make px4_sitl

# px4_msgs
# git clone -b release/1.14 https://github.com/PX4/px4_msgs.git


# ROS2
# apt install ros-dev-tools
# source /opt/ros/humble/setup.bash && echo "source /opt/ros/humble/setup.bash" >> .bashrc



##############
# ENTRYPOINT #
##############

RUN add-apt-repository universe

# Configurations
#TODO hardcoded
# COPY .vscode/ $HOME/workspace/.vscode/

# Clean
RUN apt -y autoremove \
	&& apt clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

# Set user
USER $UBUNTU_USER
WORKDIR /home/$UBUNTU_USER

# Set entrypoint
COPY ./docker/ros2_entrypoint.sh /
ENTRYPOINT ["/ros2_entrypoint.sh"]

ENV force_color_prompt=yes
CMD ["bash"]